singleQuery = { SOI ~ queryPrimary ~ EOI}
singleExpression = { SOI ~ expression ~ EOI}
singleDataType = { SOI ~ dataType ~ EOI}
singleTableSchema = { SOI ~ colTypeList ~ EOI}

queryPrimary = {
    selectClause
    ~ fromClause
    ~ whereClause?
}

selectClause = { ^"select" ~ namedExpressionSeq}
fromClause = { ^"from" ~ identifier }
whereClause = { ^"where" ~ booleanExpression }

relationPrimary = { identifier ~ (^"as"? ~ !mainKeyword ~ identifier)? }

namedExpressionSeq = { namedExpression ~ ("," ~ namedExpression)*}
namedExpression = {
    expression ~ (^"as")?  ~ !mainKeyword  ~ identifier
    | expression
}
expression = { booleanExpression }

// 逻辑表达式（逻辑层）
booleanExpression = { logicalOrExpression }

logicalOrExpression = { logicalAndExpression ~ (^"or" ~ logicalAndExpression)* }
logicalAndExpression = { logicalNotExpression ~ (^"and" ~ logicalNotExpression)* }
logicalNotExpression = { NOT? ~ predicateExpression }
predicateExpression = { valueExpression ~ predicate? }

predicate = {
    predicateBetween
    | predicateRlike
    | predicateLike
    | predicateIn
    | predicateNull
}

predicateBetween = { NOT? ~ ^"between" ~ valueExpression ~ ^"and" ~ valueExpression }
predicateRlike = { NOT? ~ ^"rlike" ~ valueExpression}
predicateLike = { NOT? ~ ^"like" ~ valueExpression}
predicateIn = { NOT? ~ ^"in" ~ "(" ~ expression ~ ("," ~ expression)* ~ ")"}
predicateNull = {^"is" ~ NOT? ~ ^"null"}

// 值表达式（算术层）
valueExpression = { comparisonExpression }

comparisonExpression = { addSubExpression ~ (comparisonOperator ~ addSubExpression)? }
// 加减法
addSubExpression = { mulDivExpression ~ ((PLUS | MINUS) ~ mulDivExpression)* }
// 乘除法
mulDivExpression = { unaryExpression ~ ((ASTERISK | SLASH | PERCENT) ~ unaryExpression)* }
// 一元表达式
unaryExpression = { (MINUS | PLUS | TILDE)? ~ primaryExpression }

// 基本表达式
primaryExpression = { atomicExpression ~ (subscriptOp | dereferenceOp)* }
atomicExpression  = {
    searchedCase
    | simpleCase
    | cast
    | functionCall
    | constant
    | columnReference
    | "(" ~ expression ~ ")"
}
columnReference = { identifier }
subscriptOp = { "[" ~ valueExpression ~ "]" }
dereferenceOp = { "." ~ identifier }

functionCall = {
    identifier ~ functionArgs
}

functionArgs = {
    "(" ~ (expression ~ ("," ~ expression)*)? ~ ")"
}

searchedCase = { ^"case" ~ whenClause +  ~ ("else" ~ expression)? ~ ^"end" }
simpleCase = { ^"case" ~ expression ~ whenClause +  ~ ("else" ~ expression)? ~ ^"end" }
whenClause = { ^"when" ~ expression ~ ^"then" ~ expression}

cast = { ^"cast" ~ "(" ~ expression ~ ^"as" ~ dataType  ~ ")" }

dataType = {
    arrayDataType
    | structDataType
    | primitiveDataType
}
arrayDataType = { ^"array" ~ "<"  ~ dataType ~ ">" }
structDataType = { ^"struct" ~ "<"  ~ complexColType ~ ("," ~ complexColType)* ~ ">" }
primitiveDataType = { identifier }

colTypeList = { colType ~ ("," ~ colType)* }
colType = { identifier ~ dataType ~ (^"not" ~ ^"null")? }
complexColType = { identifier ~ ":" ~ dataType }

constant = { NULL | number | booleanValue | STRING }

qualifiedName = { identifier ~ ("." ~ identifier)* }
identifier = {unquotedIdentifier | quotedIdentifier}
unquotedIdentifier = @{ (ASCII_ALPHA | ASCII_DIGIT | "_")+ } // [a-zA-Z0-9_]+
quotedIdentifier = { "`" ~ (!"`" ~ ANY)* ~ "`"}

number = @{
    MINUS?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
}

booleanValue = { ^"true" | ^"false" }
STRING = ${
    "'" ~ (!"'" ~ ANY)*  ~ "'"
    | "\"" ~ (!"\"" ~ ANY)*  ~ "\""
}

NOT = { ^"not" | "!"}

// arithmeticOperator = { PLUS | MINUS | ASTERISK | SLASH | PERCENT }
NULL = { ^"null" }
PLUS = { "+" }
MINUS = { "-" }
ASTERISK = { "*" }
SLASH = { "/" }
PERCENT = { "%" }
TILDE = { "~" }

comparisonOperator = { EQ | NEQ | NEQJ | NSEQ | LT | LTE | GT | GTE  }
EQ = { "=" | "=="}
NEQ = { "<>"}
NEQJ = { "!="}
NSEQ = { "<=>"}
LT = { "<" }
LTE = { "<=" | "!>"}
GT = { ">" }
GTE = { ">=" | "!<"}

mainKeyword = { ^"from" | ^"where" | ^"order" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }